{
	"info": {
		"_postman_id": "56957206-2ba4-4f65-afe0-968733ab8fb7",
		"name": "Convert OAS 2.0 to OAS 3.0",
		"description": "Converts OAS 2.0 API definitions to OAS 3.0, creating either completely new APIs with OAS 3.0 schema files, or adding a new OAS 3.0 schema file to the existing API. The collection can operate on a single API in a workspace, or all the APIs in a workspace.\n\nYAML and JSON specifications are supported. The new schema file uses the same file format as the source schema file.\n\nThe collections, environments and source code for the Lambda converter function are hosted in [GitHub](https://github.com/BidnessForB/oas-converter-lambda).\n\n## Limitations\n\n- Accepts only OAS 2.0 input schema files.\n- Only processes APIs with a single schema file\n- Supports OAS 3.0 output only\n- Error checking and parameter/schema validation are rudimentary\n- Git-linked APIs are not supported\n    \n\n## Overview\n\nGiven an API, the collection collects the schema file and submits to an AWS Lambda function, which handles the conversion between OAS 2.0 and OAS 3.0. The function returns the OAS 3.0 schema, and the collection then either creates a brand new API in the workspace with the new schema file, or appends the new files as a schema file to the source API.\n\nNew API names are comprised of the old API name with `-3.0` append:\n\n`my-api` -> `my-api-3.0`\n\nNew API schema files follow a smilar naming convention:\n\n`index.yaml` -> `index-OAS3.0.yaml`\n\n## Configuration\n\nThe collection uses the `Convert OAS 2.0 to OAS 3.0` environment. Be sure to fork this environment into your workspace when you fork the collection. Variables set at runtime have the prefix `rt_`. Variables that can be modified before running the collection are prefixed with `cfg_`. The `rt_APIIDs` variable is an exception as it can be set manually for single API operation. Othewise it is set runtime when running the collection against a workspace.\n\nInspect and set the following values in the `Convert OAS 2.0 to OAS 3.0` environment:\n\n| **Variable** | **Values** | **Description** |\n| --- | --- | --- |\n| `cfg_OASConverterUrl` | URL | A URL for the Lambda conversion service (or any other conversion service). |\n| `cfg_workspaceId` | String | A valid workspace ID. The Postman API Key in use will need Write permission on this workspace. |\n| `cfg_pmanAPIKey` | String | A valid Postman API Key. |\n| `cfg_createNewAPI` | `true`, `false` | \\- `true` New APIs will be created  <br>\\- `false` New API Schema files will be appended to the source APIs |\n| `cfg_outputFileFormat` | `json`, `yaml` |  |\n| `cfg_outputAPIType` | `openapi_3` | Currently only OAS 3.0 is supported |\n| `cfg_apiNameFilter` | valid nodejs regular expression pattern. the `gi` flags will be added | Filter to select only matching API names |\n| `rt_APIIDs` | An array of API IDs | Set for single API operation:  <br>`'[\"\"]` |\n\n## Operation\n\n### Single API mode\n\n1. Set the `rt_APIIDs`variable to a JSON array with API ID for an API present in the workspace specified by `cfg_workspaceId`.\n2. Run the `Single API` folder only.\n    \n\n### Workspace Mode\n\nRun the entire collection.",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "23889826",
		"_collection_link": "https://v10-technical-enablement.postman.co/workspace/OAS-Conversion~7d5d64e7-2720-4e8c-9dbf-8429b5514f84/collection/23889826-56957206-2ba4-4f65-afe0-968733ab8fb7?action=share&source=collection_link&creator=23889826"
	},
	"item": [
		{
			"name": "Multi API",
			"item": [
				{
					"name": "Get workspace",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"/*pm.environment.set('rt_sourceSchema',\"\");",
									"pm.environment.set('rt_schemaId',\"\");",
									"pm.environment.set('rt_apiName',\"\");",
									"pm.environment.set('rt_apiDescription',\"\");",
									"pm.environment.set('rt_apiSummary',\"\");",
									"pm.environment.set('rt_sourceFileFormat',\"\");",
									"pm.environment.set('rt_sourceFilePath',\"\");",
									"pm.environment.set('rt_sourceSchema-string',\"\");",
									"pm.environment.set('rt_sourceSchema64',\"\");",
									"pm.environment.set('rt_targetAPIID',\"\");",
									"pm.environment.set('rt_targetSchema',\"\");",
									"pm.environment.set('rt_targetSchema-string',\"\");",
									"pm.environment.set('rt_outputFilePath',\"\");",
									"*/",
									"var vals = pm.environment.values;",
									"vals = Object.entries(vals);",
									"//console.log(vals[0][1]);",
									"vals[0][1].forEach((val) => {",
									"    if(val.key.substring(0,3) == 'rt_') {",
									"        ",
									"        pm.environment.set(val.key,'');",
									"    }",
									"})",
									"pm.environment.set('rt_APIIDs','[]');"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"//const apis = pm.response.json().workspace.workspace.apis;",
									"//console.log(pm.response.json().workspace.apis);",
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const apis = pm.response.json().workspace.apis;",
									"let apiids = [];",
									"",
									"    //const regex = new RegExp(/^OAS20(-yaml|-yml|-json|!*)$/g);",
									"    try {",
									"        var regex = new RegExp(pm.environment.get('cfg_APINameFilter'),'gi');",
									"        console.log(\"Regex: \", regex);",
									"pm.test(\"cfg_APINameFilter is a valid regular expression\", function () {",
									"             // This test is designed to fail",
									"            pm.expect(1 + 1).to.equal(2, \"'\" + pm.environment.get('cfg_APINameFilter') + \"' is a valid regular expression\" ); // This assertion will fail",
									"            });",
									"",
									"    apis.forEach((api) => {",
									"        ",
									"        if(regex.test(api.name)) {",
									"            console.log(\"API name match: \", api.name);",
									"            apiids.push(api.id);",
									"        }",
									"        else {",
									"            //console.log(\"API name mismatch, skipping\");",
									"        }    ",
									"    })",
									"",
									"    }",
									"    catch(error) {",
									"        console.log(\"Invalid regex for cfg_APINameFilter.\");",
									"        pm.test(\"cfg_APINameFilter is a valid regular expression\", function () {",
									"             // This test is designed to fail",
									"            pm.expect(1 + 1).to.equal(3, \"'\" + pm.environment.get('cfg_APINameFilter') + \"' is not a valid regular expression\" ); // This assertion will fail",
									"            });",
									"        postman.setNextRequest(null);",
									"    }",
									"pm.environment.set('rt_APIIDs',JSON.stringify(apiids));",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "https://api.getpostman.com/workspaces/{{cfg_workspaceId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"workspaces",
								"{{cfg_workspaceId}}"
							]
						},
						"description": "Returns a list of APIs contained in the workspace specified by `cfg_workspaceId`\n\n### Important"
					},
					"response": [
						{
							"name": "Get a Personal Workspace",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspace\": {\n        \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n        \"name\": \"My Workspace\",\n        \"type\": \"personal\",\n        \"description\": \"This is your personal, private workspace to play around in. Only you can see the collections and APIs you create here - unless you share them with your team.\",\n        \"visibility\": \"personal\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"createdAt\": \"2022-07-06T16:18:32.000Z\",\n        \"updatedAt\": \"2022-07-06T20:55:13.000Z\",\n        \"collections\": [\n            {\n                \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n                \"name\": \"Test Collection\",\n                \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n                \"name\": \"Test Environment\",\n                \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n                \"name\": \"Test Mock\",\n                \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n                \"name\": \"Test Monitor\",\n                \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n            }\n        ],\n        \"apis\": [\n            {\n                \"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n                \"name\": \"Test API\",\n                \"uid\": \"12345678-387c2863-6ee3-4a56-8210-225f774edade\"\n            }\n        ]\n    }\n}"
						},
						{
							"name": "Get a Public Workspace",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspace\": {\n        \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n        \"name\": \"Public Workspace\",\n        \"type\": \"team\",\n        \"description\": \"This is a public workspace.\",\n        \"visibility\": \"public\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"createdAt\": \"2022-07-06T16:18:32.000Z\",\n        \"updatedAt\": \"2022-07-06T20:55:13.000Z\",\n        \"collections\": [\n            {\n                \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n                \"name\": \"Test Collection\",\n                \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n                \"name\": \"Test Environment\",\n                \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n                \"name\": \"Test Mock\",\n                \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n                \"name\": \"Test Monitor\",\n                \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n            }\n        ],\n        \"apis\": [\n            {\n                \"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n                \"name\": \"Test API\",\n                \"uid\": \"12345678-387c2863-6ee3-4a56-8210-225f774edade\"\n            }\n        ]\n    }\n}"
						},
						{
							"name": "Get a Private Workspace",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspace\": {\n        \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n        \"name\": \"Private Workspace\",\n        \"type\": \"team\",\n        \"description\": \"This is a private workspace.\",\n        \"visibility\": \"private\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"createdAt\": \"2022-07-06T16:18:32.000Z\",\n        \"updatedAt\": \"2022-07-06T20:55:13.000Z\",\n        \"collections\": [\n            {\n                \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n                \"name\": \"Test Collection\",\n                \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n                \"name\": \"Test Environment\",\n                \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n                \"name\": \"Test Mock\",\n                \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n                \"name\": \"Test Monitor\",\n                \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n            }\n        ],\n        \"apis\": [\n            {\n                \"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n                \"name\": \"Test API\",\n                \"uid\": \"12345678-387c2863-6ee3-4a56-8210-225f774edade\"\n            }\n        ]\n    }\n}"
						},
						{
							"name": "Get a Team Workspace",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspace\": {\n        \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n        \"name\": \"Team Workspace\",\n        \"type\": \"team\",\n        \"description\": \"This is a team workspace.\",\n        \"visibility\": \"team\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"createdAt\": \"2022-07-06T16:18:32.000Z\",\n        \"updatedAt\": \"2022-07-06T20:55:13.000Z\",\n        \"collections\": [\n            {\n                \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n                \"name\": \"Test Collection\",\n                \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n                \"name\": \"Test Environment\",\n                \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n                \"name\": \"Test Mock\",\n                \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n                \"name\": \"Test Monitor\",\n                \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n            }\n        ],\n        \"apis\": [\n            {\n                \"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n                \"name\": \"Test API\",\n                \"uid\": \"12345678-387c2863-6ee3-4a56-8210-225f774edade\"\n            }\n        ]\n    }\n}"
						},
						{
							"name": "Get a Partner Workspace",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"workspace\": {\n        \"id\": \"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9\",\n        \"name\": \"Partner Workspace\",\n        \"type\": \"team\",\n        \"description\": \"This is a partner workspace.\",\n        \"visibility\": \"partner\",\n        \"createdBy\": \"12345678\",\n        \"updatedBy\": \"12345678\",\n        \"createdAt\": \"2022-07-06T16:18:32.000Z\",\n        \"updatedAt\": \"2022-07-06T20:55:13.000Z\",\n        \"collections\": [\n            {\n                \"id\": \"12ece9e1-2abf-4edc-8e34-de66e74114d2\",\n                \"name\": \"Test Collection\",\n                \"uid\": \"12345678-12ece9e1-2abf-4edc-8e34-de66e74114d2\"\n            }\n        ],\n        \"environments\": [\n            {\n                \"id\": \"5daabc50-8451-43f6-922d-96b403b4f28e\",\n                \"name\": \"Test Environment\",\n                \"uid\": \"12345678-5daabc50-8451-43f6-922d-96b403b4f28e\"\n            }\n        ],\n        \"mocks\": [\n            {\n                \"id\": \"e3d951bf-873f-49ac-a658-b2dcb91d3289\",\n                \"name\": \"Test Mock\",\n                \"uid\": \"12345678-e3d951bf-873f-49ac-a658-b2dcb91d3289\"\n            }\n        ],\n        \"monitors\": [\n            {\n                \"id\": \"1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\",\n                \"name\": \"Test Monitor\",\n                \"uid\": \"12345678-1e6b6cc1-c760-48e0-968f-4bfaeeae9af1\"\n            }\n        ],\n        \"apis\": [\n            {\n                \"id\": \"387c2863-6ee3-4a56-8210-225f774edade\",\n                \"name\": \"Test API\",\n                \"uid\": \"12345678-387c2863-6ee3-4a56-8210-225f774edade\"\n            }\n        ]\n    }\n}"
						},
						{
							"name": "Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": {
										"content": "The mime type of this content",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"workspaceNotFoundError\",\n        \"message\": \"Workspace not found\",\n        \"statusCode\": 404\n    }\n}"
						},
						{
							"name": "Rate Limit Exceeded",
							"originalRequest": {
								"method": "GET",
								"header": [],
								"url": {
									"raw": "https://api.getpostman.com/workspaces/1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"workspaces",
										"1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
									]
								}
							},
							"status": "Too Many Requests",
							"code": 429,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": {
										"content": "The mime type of this content",
										"type": "text/plain"
									}
								}
							],
							"cookie": [],
							"body": "{\n    \"error\": {\n        \"name\": \"instanceNotFoundError\",\n        \"message\": \"Instance not found in the database.\"\n    }\n}"
						}
					]
				}
			]
		},
		{
			"name": "Single API",
			"item": [
				{
					"name": "Get API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"",
									"const regex = new RegExp(pm.environment.get('cfg_APINameFilter'),'gi');",
									"const json = pm.response.json();",
									"if(!regex.test(json.name)) {",
									"    console.log('Name mismatch, skipping');",
									"    postman.setNextRequest('Get API');",
									"}",
									"else {",
									"    pm.environment.set('rt_schemaId', json.schemas[0].id)",
									"    pm.environment.set('rt_apiName', json.name);",
									"    pm.environment.set('rt_apiDescription', json.description);",
									"    pm.environment.set('rt_apiSummary', json.summary);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"",
									"try {",
									"var apiIds = JSON.parse(pm.environment.get('rt_APIIDs'));",
									"console.log(apiIds);",
									"}",
									"catch(err) {",
									"    console.log(\"Error parsing apiIds.  Check that environment is set\");",
									"    pm.test(\"Unable to parse rt_APIIDs\", function () {",
									"             // This test is designed to fail",
									"            pm.expect(1 + 1).to.equal(2, \"Correct environment is selected\" ); // This assertion will fail",
									"            });",
									"    postman.setNextRequest(null);",
									"",
									"}",
									"",
									"if(typeof apiIds !== 'undefined' && apiIds.length > 0) {",
									"    var apiId = apiIds.pop();",
									"    console.log('here ', apiId);",
									"    pm.environment.set('sourceAPIID',apiId);",
									"    console.log('here ', apiIds);",
									"    pm.environment.set('rt_APIIDs',JSON.stringify(apiIds));",
									"}",
									"",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api.v10+json"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/apis/{{sourceAPIID}}?include=schemas",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{sourceAPIID}}"
							],
							"query": [
								{
									"key": "include",
									"value": "schemas",
									"description": "Optional. An array that contains one or more of the following additional resources to include in the response. Use this parameter to query for element links to the API, such as collections and schemas:\n- `collections` — Query for linked Postman collections.\n- `versions` — Query for linked versions.\n- `schemas` — Query for linked schemas.\n- `gitInfo` — Query for information about the API’s git-linked repository. This query only returns the linked repository  and folder locations of the files. It does **not** return `collections` or `schemas` information.\n**Note:**\nAPI viewers can only use the `versions` option.\n        "
								}
							]
						},
						"description": "Gets information about an API for use later in the run.\n\n**Note:**\n\n- Git-linked APIs are not supported"
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}"
									]
								},
								"description": "Gets information about an API."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"description\": \"This is a test API.\",\n    \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n    \"updatedBy\": \"12345678\",\n    \"createdBy\": \"12345678\",\n    \"createdAt\": \"2022-06-09T14:48:45.000Z\",\n    \"name\": \"Test API\",\n    \"summary\": \"Test API.\",\n    \"updatedAt\": \"2022-06-09T19:50:49.000Z\"\n}"
						},
						{
							"name": "Response with the include Parameter",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}?include=schemas,collections,versions,gitInfo",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}"
									],
									"query": [
										{
											"key": "include",
											"value": "schemas,collections,versions,gitInfo"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"createdBy\": \"12345678\",\n    \"name\": \"Test API\",\n    \"updatedBy\": \"12345678\",\n    \"updatedAt\": \"2022-06-09T19:50:49.000Z\",\n    \"description\": \"This is a test API.\",\n    \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n    \"collections\": [\n        {\n            \"id\": \"16bb367e-fafb-4ef3-933b-ee3d971866fb\"\n        }\n    ],\n    \"gitInfo\": {},\n    \"schemas\": [\n        {\n            \"id\": \"ae2b9ab2-28f2-401d-912f-eca09a78e98b\"\n        }\n    ],\n    \"versions\": [\n        {\n            \"id\": \"18ccb2dc-1746-4945-ba76-8152b37cr123\",\n            \"name\": \"v1.0.0\"\n        }\n    ],\n    \"createdAt\": \"2022-06-09T14:48:45.000Z\",\n    \"summary\": \"Test API.\"\n}"
						},
						{
							"name": "Response for Git-Linked API with the include Parameter",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}?include=schemas,collections,versions,gitInfo",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}"
									],
									"query": [
										{
											"key": "include",
											"value": "schemas,collections,versions,gitInfo"
										}
									]
								},
								"description": "Gets information about an API."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"createdBy\": \"12345678\",\n    \"createdAt\": \"2022-06-09T14:48:45.000Z\",\n    \"updatedBy\": \"12345678\",\n    \"updatedAt\": \"2022-06-09T19:50:49.000Z\",\n    \"description\": \"This is a test API.\",\n    \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n    \"name\": \"Test API\",\n    \"summary\": \"Test API.\",\n    \"versions\": [\n        {\n            \"id\": \"18ccb2dc-1746-4945-ba76-8152b37cr123\",\n            \"name\": \"v1.0.0\"\n        }\n    ],\n    \"gitInfo\": {\n        \"schemaFolder\": \"schema-folder\",\n        \"domain\": \"https://example.com\",\n        \"repository\": \"repo-name\",\n        \"organization\": \"org-name\",\n        \"collectionFolder\": \"collection-folder\"\n    }\n}"
						},
						{
							"name": "Successful Response for API Viewers",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}?include=versions",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}"
									],
									"query": [
										{
											"key": "include",
											"value": "versions"
										}
									]
								},
								"description": "Gets information about an API."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"createdAt\": \"2022-06-09T14:48:45.000Z\",\n    \"updatedAt\": \"2022-06-09T19:50:49.000Z\",\n    \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n    \"name\": \"Test API\",\n    \"summary\": \"Test API.\",\n    \"description\": \"This is a test API.\",\n    \"createdBy\": \"12345678\",\n    \"updatedBy\": \"12345678\",\n    \"versions\": [\n        {\n            \"id\": \"18ccb2dc-1746-4945-ba76-8152b37cr123\",\n            \"name\": \"v1.0.0\"\n        },\n        {\n            \"id\": \"5260b75f-447e-467c-9299-12f16c924503\",\n            \"name\": \"v1.0.1\"\n        }\n    ]\n}"
						},
						{
							"name": "API Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}"
									]
								},
								"description": "Gets information about an API."
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"instanceNotFoundError\",\n    \"title\": \"We could not find the API you are looking for\",\n    \"detail\": \"We could not find the API you are looking for.\"\n}"
						},
						{
							"name": "v9 Unsupported",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"unsupportedEntityError\",\n    \"title\": \"Unsupported API\",\n    \"detail\": \"This endpoint does not support v9 APIs.\"\n}"
						}
					]
				},
				{
					"name": "Get schema files",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const path = require('path');",
									"let filePath = pm.response.json().files[0].name",
									"let filePath30 = filePath.replaceAll(/\\./g, \"-OAS3.0.\")",
									"pm.environment.set('rt_sourceFilePath', filePath );",
									"pm.environment.set('rt_outputFilePath', filePath30);",
									"",
									"pm.environment.set('rt_sourceFileFormat', path.extname(filePath).substring(1));",
									"",
									"                               "
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api.v10+json"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/apis/{{sourceAPIID}}/schemas/{{rt_schemaId}}/files",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{sourceAPIID}}",
								"schemas",
								"{{rt_schemaId}}",
								"files"
							],
							"query": [
								{
									"key": "limit",
									"value": "{{limit}}",
									"description": "Optional. The maximum number of rows to return in the response. This value defaults to `10`.",
									"disabled": true
								},
								{
									"key": "versionId",
									"value": "{{versionId}}",
									"description": "Optional. The API's version ID.",
									"disabled": true
								},
								{
									"key": "cursor",
									"value": "{{cursor}}",
									"description": "Optional. The pointer to the first record of the set of paginated results.",
									"disabled": true
								}
							]
						},
						"description": "Gets the files in an API schema.\n\n**NOTE:** Intended only for use with single-file API schemas. The additional parameters documented in the Postman API collection are not supported."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files?versionId=66ae9950-0869-4e65-96b0-1e0e47e771af&limit=2&cursor=eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJkaXIvczEuanNvbiJ9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files"
									],
									"query": [
										{
											"key": "versionId",
											"value": "66ae9950-0869-4e65-96b0-1e0e47e771af"
										},
										{
											"key": "limit",
											"value": "2"
										},
										{
											"key": "cursor",
											"value": "eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJkaXIvczEuanNvbiJ9"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"meta\": {\n        \"nextCursor\": \"eyJzY2hlbWUiOiJwYXRoX2FzYyIsImRpcmVjdGlvblR5cGUiOiJuZXh0IiwicGl2b3QiOiJwYXRoIiwidmFsdWUiOiJOZXdQZXQuanNvbiJ9\"\n    },\n    \"files\": [\n        {\n            \"id\": \"e8a015e0-f472-4bb3-a523-57ce7c4583ed\",\n            \"path\": \"data-model/error.yaml\",\n            \"name\": \"error.yaml\",\n            \"createdAt\": \"2022-03-29T11:37:15Z\",\n            \"updatedAt\": \"2022-03-29T11:37:15Z\",\n            \"createdBy\": 2345,\n            \"updatedBy\": 2345\n        },\n        {\n            \"id\": \"e8a015e0-f472-4bb3-a523-57ce7c4583ef\",\n            \"path\": \"data-model/error2.yaml\",\n            \"name\": \"error2.yaml\",\n            \"createdAt\": \"2022-03-29T11:37:15Z\",\n            \"updatedAt\": \"2022-03-29T11:37:15Z\",\n            \"createdBy\": 2345,\n            \"updatedBy\": 2345\n        }\n    ]\n}"
						},
						{
							"name": "API Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"instanceNotFoundError\",\n    \"title\": \"Resource not found\",\n    \"detail\": \"We could not find the API you are looking for\"\n}"
						},
						{
							"name": "Git-Linked API Errror",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"This action is not allowed for git linked APIs\",\n    \"type\": \"actionNotAllowedError\",\n    \"title\": \"Action not allowed\"\n}"
						},
						{
							"name": "Schema Not Linked to API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"invalidParamError\",\n    \"title\": \"Invalid param error\",\n    \"detail\": \"Schema is not linked to the API\"\n}"
						},
						{
							"name": "Invalid Version ID",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files?versionId=e8a015e0-f472",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files"
									],
									"query": [
										{
											"key": "versionId",
											"value": "e8a015e0-f472"
										}
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"invalidParamError\",\n    \"title\": \"Invalid version Id provided\",\n    \"detail\": \"Schema not published in this version\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"You are not permitted to perform the action.\",\n    \"detail\": \"Please ensure that you have required permissions\",\n    \"type\": \"ForbiddenError\"\n}"
						}
					]
				},
				{
					"name": "Get schema file contents",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"pm.environment.set('rt_sourceSchema', JSON.parse(JSON.stringify((pm.response.json().content))));",
									"pm.environment.set('rt_sourceSchema-string', JSON.stringify((pm.response.json().content)));",
									"",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api.v10+json"
							}
						],
						"url": {
							"raw": "https://api.getpostman.com/apis/{{sourceAPIID}}/schemas/{{rt_schemaId}}/files/{{rt_sourceFilePath}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{sourceAPIID}}",
								"schemas",
								"{{rt_schemaId}}",
								"files",
								"{{rt_sourceFilePath}}"
							],
							"query": [
								{
									"key": "versionId",
									"value": "{{versionId}}",
									"description": "Optional. The API's version ID.",
									"disabled": true
								}
							]
						},
						"description": "Gets API schema file contents at the defined path."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"ae2b9ab2-28f2-401d-912f-eca09a78e98b\",\n    \"path\": \"s1.json\",\n    \"name\": \"s1\",\n    \"createdBy\": \"2345\",\n    \"updatedBy\": \"2345\",\n    \"createdAt\": \"2022-03-29T11:37:15Z\",\n    \"updatedAt\": \"2022-03-29T11:37:15Z\",\n    \"content\": \"openapi: '3.0.0'\\ninfo:\\n  version: '1.0.0'\\n  title: 'Sample API'\\n  description: Buy or rent spacecrafts\\n\\npaths:\\n  /spacecrafts/{spacecraftId}:\\n    parameters:\\n      - name: spacecraftId\\n        description: The unique identifier of the spacecraft\\n        in: path\\n        required: true\\n        schema:\\n          $ref: '#/components/schemas/SpacecraftId'\\n    get:\\n      summary: Read a spacecraft\\n      responses:\\n        '200':\\n          description: The spacecraft corresponding to the provided `spacecraftId`\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Spacecraft'\\n        404:\\n          description: No spacecraft found for the provided `spacecraftId`\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\n        500:\\n          description: Unexpected error\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\ncomponents:\\n  schemas:\\n    SpacecraftId:\\n      description: The unique identifier of a spacecraft\\n      type: string\\n    Spacecraft:\\n      type: object\\n      required:\\n        - id\\n        - names\\n        - type\\n      properties:\\n        id:\\n          $ref: '#/components/schemas/SpacecraftId'\\n        name:\\n          type: string\\n        type:\\n          type: string\\n          enum:\\n            - capsule\\n            - probe\\n            - satellite\\n            - spaceplane\\n            - station\\n        description:\\n          type: string\\n    Error:\\n      type: object\\n      required:\\n        - message\\n      properties:\\n        message:\\n          description: A human readable error message\\n          type: string\\n  securitySchemes:\\n    ApiKey:\\n      type: apiKey\\n      in: header\\n      name: X-Api-Key\\nsecurity:\\n  - ApiKey: []\"\n}"
						},
						{
							"name": "Successful Response for Published Version",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}?versionId=ae2b9ab2-28f2-401d-912f-eca09a78e98b",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									],
									"query": [
										{
											"key": "versionId",
											"value": "ae2b9ab2-28f2-401d-912f-eca09a78e98b"
										}
									]
								}
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"ae2b9ab2-28f2-401d-912f-eca09a78e98b\",\n    \"path\": \"s1.json\",\n    \"name\": \"s1\",\n    \"createdBy\": \"2345\",\n    \"updatedBy\": \"2345\",\n    \"createdAt\": \"2022-03-29T11:37:15Z\",\n    \"updatedAt\": \"2022-03-29T11:37:15Z\",\n    \"content\": \"openapi: '3.0.0'\\ninfo:\\n  version: '1.0.0'\\n  title: 'Sample API'\\n  description: Buy or rent spacecrafts\\n\\npaths:\\n  /spacecrafts/{spacecraftId}:\\n    parameters:\\n      - name: spacecraftId\\n        description: The unique identifier of the spacecraft\\n        in: path\\n        required: true\\n        schema:\\n          $ref: '#/components/schemas/SpacecraftId'\\n    get:\\n      summary: Read a spacecraft\\n      responses:\\n        '200':\\n          description: The spacecraft corresponding to the provided `spacecraftId`\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Spacecraft'\\n        404:\\n          description: No spacecraft found for the provided `spacecraftId`\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\n        500:\\n          description: Unexpected error\\n          content:\\n            application/json:\\n              schema:\\n                $ref: '#/components/schemas/Error'\\ncomponents:\\n  schemas:\\n    SpacecraftId:\\n      description: The unique identifier of a spacecraft\\n      type: string\\n    Spacecraft:\\n      type: object\\n      required:\\n        - id\\n        - names\\n        - type\\n      properties:\\n        id:\\n          $ref: '#/components/schemas/SpacecraftId'\\n        name:\\n          type: string\\n        type:\\n          type: string\\n          enum:\\n            - capsule\\n            - probe\\n            - satellite\\n            - spaceplane\\n            - station\\n        description:\\n          type: string\\n    Error:\\n      type: object\\n      required:\\n        - message\\n      properties:\\n        message:\\n          description: A human readable error message\\n          type: string\\n  securitySchemes:\\n    ApiKey:\\n      type: apiKey\\n      in: header\\n      name: X-Api-Key\\nsecurity:\\n  - ApiKey: []\"\n}"
						},
						{
							"name": "API Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"instanceNotFoundError\",\n    \"title\": \"Resource not found\",\n    \"detail\": \"We could not find the API you are looking for\"\n}"
						},
						{
							"name": "Path Not Found",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"Resource not found\",\n    \"detail\": \"API schema file does not exist\",\n    \"type\": \"instanceNotFoundError\"\n}"
						},
						{
							"name": "Schema Not Linked to API",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"invalidParamError\",\n    \"title\": \"Invalid param error\",\n    \"detail\": \"Schema is not linked to the API\"\n}"
						},
						{
							"name": "Git-Linked API Errror",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"actionNotAllowedError\",\n    \"title\": \"Action not allowed\",\n    \"detail\": \"This action is not allowed for git linked APIs\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "GET",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"You are not permitted to perform the action.\",\n    \"detail\": \"Please ensure that you have required permissions\",\n    \"type\": \"ForbiddenError\"\n}"
						}
					]
				},
				{
					"name": "ConvertOAS2To3",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});",
									"const json = pm.response.json();",
									"//console.log(json.b64);",
									"var oas30schema = \"\";",
									"if(pm.environment.get('cfg_outputFileFormat') == 'yaml' || pm.environment.get('cfg_outputFileFormat') == 'yml')",
									"{",
									"    oas30schema = Buffer.from(json.b64,'base64').toString('utf-8');",
									"}",
									"else {",
									"    oas30schema = JSON.stringify(json.spec);",
									"}",
									"",
									"let oas30schemaString = \"\";",
									"oas30schemaString = oas30schema.replaceAll(/\\n/g, \"\\\\n\");",
									"oas30schemaString = oas30schema.replaceAll(/\\\"/g, \"\\\\\\\"\");",
									"console.log(oas30schemaString);",
									"pm.environment.set('rt_targetSchema', oas30schema);",
									"pm.environment.set('rt_targetSchema-string',oas30schemaString)",
									"",
									"if(pm.environment.get('cfg_createNewAPI') == 'false') {",
									"    postman.setNextRequest(\"Add 3.0 Schema\")",
									"}",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let sourceSchema = pm.environment.get('rt_sourceSchema');",
									"//console.log(\"Source schema: \", sourceSchema);",
									"let sourceSchema64 = Buffer.from(sourceSchema).toString('base64');",
									"console.log(sourceSchema64);",
									"pm.environment.set('rt_sourceSchema64',sourceSchema64);",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\"b64\":\"{{rt_sourceSchema64}}\"}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{cfg_OASConverterUrl}}/?outputFileFormat={{rt_sourceFileFormat}}&inputFileFormat={{rt_sourceFileFormat}}&inputAPIType=swagger_2&outputAPIType={{cfg_outputAPIType}}",
							"host": [
								"{{cfg_OASConverterUrl}}"
							],
							"path": [
								""
							],
							"query": [
								{
									"key": "outputFileFormat",
									"value": "{{rt_sourceFileFormat}}"
								},
								{
									"key": "inputFileFormat",
									"value": "{{rt_sourceFileFormat}}"
								},
								{
									"key": "inputAPIType",
									"value": "swagger_2"
								},
								{
									"key": "outputAPIType",
									"value": "{{cfg_outputAPIType}}"
								}
							]
						},
						"description": "Sends the source OAS file to a Lambda function at `cfg_OASConverterUrl` for conversion:\n\n#### Parameters\n\n**outputAPIType**: The OAS version to convert the source to is specified in the `cfg_outputAPIType` variable. Currently only `openapi_3` is supported."
					},
					"response": []
				},
				{
					"name": "Create 3.0 API",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"pm.environment.set(\"rt_targetAPIID\", pm.response.json().id);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v10+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{rt_apiName}}-3.0\",\n    \"summary\": \"Converted from OAS 2.0\\n{{rt_apiSummary}}\",\n    \"description\": \"{{rt_apiDescription}}\"\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/apis?workspaceId={{cfg_workspaceId}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis"
							],
							"query": [
								{
									"key": "workspaceId",
									"value": "{{cfg_workspaceId}}",
									"description": "Required. The workspace ID."
								}
							]
						},
						"description": "Creates an API. Include the following properties in the request body:\n\n- `name` — A **string** value that contains the API's name. Set dynamically at runtime by the `rt_apiName` variable.\n    \n- `summary` — A **string** value that contains a summary of the API. Set dynamically at runtime by the `rt_apiSummary` variable.\n    \n- `description` — A **string** value that contains the description of the API. Set dynamically at runtime by the `rt_apiDescription` variable."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test API\",\n    \"summary\": \"Test API Schema\",\n    \"description\": \"This is a test API.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis?workspaceId=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspaceId",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
										}
									]
								},
								"description": "Creates an API. Include the following properties in the `api` object:\n\n*   `name` — A **string** value that contains the API's name.\n    \n\nYou can include the following optional properties:\n\n*   `summary` — A **string** value that contains a summary of the API.\n*   `description` — A **string** value that contains the description of the API."
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"createdAt\": \"2022-06-29T20:46:58.000Z\",\n    \"updatedAt\": \"2022-06-29T20:46:58.000Z\",\n    \"id\": \"5360b75f-447e-467c-9299-12fd6c92450d\",\n    \"name\": \"Test API\",\n    \"summary\": \"Test API Schema\",\n    \"description\": \"This is a test API.\",\n    \"createdBy\": \"12345678\",\n    \"updatedBy\": \"12345678\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test API\",\n    \"summary\": \"Test API Schema\",\n    \"description\": \"This is a test API.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis?workspaceId=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspaceId",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
										}
									]
								},
								"description": "Creates an API. Include the following properties in the `api` object:\n\n*   `name` — A **string** value that contains the API's name.\n    \n\nYou can include the following optional properties:\n\n*   `summary` — A **string** value that contains a summary of the API.\n*   `description` — A **string** value that contains the description of the API."
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"forbiddenError\",\n    \"title\": \"You are not permitted to perform the action.\",\n    \"detail\": \"You do not have access to perform this operation.\"\n}"
						},
						{
							"name": "Missing Workspace ID",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test API\",\n    \"summary\": \"Test API Schema\",\n    \"description\": \"This is a test API.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"paramMissingError\",\n    \"title\": \"Parameter is missing in the request.\",\n    \"detail\": \"Parameter, workspaceId is missing in the request.\"\n}"
						},
						{
							"name": "Workspace Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"name\": \"Test API\",\n    \"summary\": \"Test API Schema\",\n    \"description\": \"This is a test API.\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis?workspaceId=1f0df51a-8658-4ee8-a2a1-d2567dfa09a9",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis"
									],
									"query": [
										{
											"key": "workspaceId",
											"value": "1f0df51a-8658-4ee8-a2a1-d2567dfa09a9"
										}
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"title\": \"We could not find the workspace you are looking for\",\n    \"detail\": \"We could not find the workspace you are looking for.\",\n    \"type\": \"instanceNotFoundError\"\n}"
						}
					]
				},
				{
					"name": "Create OAS 3.0 schema",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let schema = pm.environment.get('rt_targetSchema-string');",
									"if(pm.environment.get('rt_sourceFileFormat') == 'yaml' || pm.environment.get('rt_sourceFileFormat') == 'yml') {",
									"   schema = schema.substring(2);",
									"   schema = schema.substring(0,schema.length - 2);",
									"   pm.environment.set('rt_targetSchema-string', schema);",
									"}",
									"",
									"",
									""
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const apiIds = JSON.parse(pm.environment.get('rt_APIIDs'));",
									"if(apiIds.length > 0) {",
									"    postman.setNextRequest(\"Get API\");",
									"}",
									"else {",
									"    postman.setNextRequest(null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"key": "Accept",
								"value": "application/vnd.api.v10+json"
							},
							{
								"key": "Content-Type",
								"value": "application/json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"type\": \"openapi:3\",\n    \"files\": [\n        {\n            \"path\": \"{{rt_outputFilePath}}\",\n            \"content\": \"{{rt_targetSchema-string}}\"\n        }\n    ]\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "https://api.getpostman.com/apis/{{rt_targetAPIID}}/schemas",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{rt_targetAPIID}}",
								"schemas"
							]
						},
						"description": "Creates a schema for an API. The request body must contain the following:\n\n- `type` — A **string** value that contains the API schema's type. Currently only `openapi:3` is supported.\n    \n- `files` — An **array** of schema files that contains the following:\n    \n    - `path` — A **string** value that contains the schema file's path. Set dynamically at runtime by the `rt_outputFilePath` variable.\n        \n    - `content` — A **string** value that contains the schema file's stringified contents. Set dyamically at runtime by the `rt_targetSchema-String` variable.\n        \n    - **NOTE**: Only single value arrays are currently supported."
					},
					"response": [
						{
							"name": "Create Schema",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"openapi:3\",\n    \"files\": [\n        {\n            \"path\": \"swagger.json\",\n            \"content\": \"{\\n  \\\"openapi\\\": \\\"3.0.0\\\",\\n  \\\"info\\\": {\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"title\\\": \\\"Sample API\\\",\\n    \\\"description\\\": \\\"Buy or rent spacecrafts\\\"\\n  },\\n  \\\"paths\\\": {\\n    \\\"/spacecrafts/{spacecraftId}\\\": {\\n      \\\"parameters\\\": [\\n        {\\n          \\\"name\\\": \\\"spacecraftId\\\",\\n          \\\"description\\\": \\\"The unique identifier of the spacecraft\\\",\\n          \\\"in\\\": \\\"path\\\",\\n          \\\"required\\\": true,\\n          \\\"schema\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/SpacecraftId\\\"\\n          }\\n        }\\n      ],\\n      \\\"get\\\": {\\n        \\\"summary\\\": \\\"Read a spacecraft\\\",\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"The spacecraft corresponding to the provided `spacecraftId`\\\",\\n            \\\"content\\\": {\\n              \\\"application/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/Spacecraft\\\"\\n                }\\n              }\\n            }\\n          },\\n          \\\"404\\\": {\\n            \\\"description\\\": \\\"No spacecraft found for the provided `spacecraftId`\\\",\\n            \\\"content\\\": {\\n              \\\"application/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/Error\\\"\\n                }\\n              }\\n            }\\n          },\\n          \\\"500\\\": {\\n            \\\"description\\\": \\\"Unexpected error\\\",\\n            \\\"content\\\": {\\n              \\\"application/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/Error\\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\\"components\\\": {\\n    \\\"schemas\\\": {\\n      \\\"SpacecraftId\\\": {\\n        \\\"description\\\": \\\"The unique identifier of a spacecraft\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      \\\"Spacecraft\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"id\\\",\\n          \\\"name\\\",\\n          \\\"type\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"id\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/SpacecraftId\\\"\\n          },\\n          \\\"name\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          \\\"type\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"enum\\\": [\\n              \\\"capsule\\\",\\n              \\\"probe\\\",\\n              \\\"satellite\\\",\\n              \\\"spaceplane\\\",\\n              \\\"station\\\"\\n            ]\\n          },\\n          \\\"description\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      },\\n      \\\"Error\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"message\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"message\\\": {\\n            \\\"description\\\": \\\"A human readable error message\\\",\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      }\\n    },\\n    \\\"securitySchemes\\\": {\\n      \\\"ApiKey\\\": {\\n        \\\"type\\\": \\\"apiKey\\\",\\n        \\\"in\\\": \\\"header\\\",\\n        \\\"name\\\": \\\"X-Api-Key\\\"\\n      }\\n    }\\n  },\\n  \\\"security\\\": [\\n    {\\n      \\\"ApiKey\\\": []\\n    }\\n  ]\\n}\"\n        },\n        {\n            \"path\": \"Pet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        },\n        {\n            \"path\": \"NewPet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"allOf\\\": [\\n    {\\n      \\\"$ref\\\": \\\"Pet.json\\\"\\n    },\\n    {\\n      \\\"required\\\": [\\n        \\\"name\\\"\\n      ],\\n      \\\"properties\\\": {\\n        \\\"description\\\": {\\n          \\\"type\\\": \\\"integer\\\",\\n          \\\"format\\\": \\\"int64\\\"\\n        }\\n      }\\n    }\\n  ]\\n}\"\n        },\n        {\n            \"path\": \"parameters.json\",\n            \"content\": \"{\\n  \\\"tagsParam\\\": {\\n    \\\"name\\\": \\\"tags\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"tags to filter by\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"collectionFormat\\\": \\\"csv\\\",\\n    \\\"items\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  },\\n  \\\"limitsParam\\\": {\\n    \\\"name\\\": \\\"limit\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"maximum number of results to return\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"integer\\\",\\n    \\\"format\\\": \\\"int32\\\"\\n  }\\n}\"\n        },\n        {\n            \"path\": \"common/Error.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"code\\\",\\n    \\\"message\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"code\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int32\\\"\\n    },\\n    \\\"message\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"openapi:3\",\n    \"files\": [\n        {\n            \"path\": \"NewPet.json\",\n            \"createdBy\": \"557089\",\n            \"id\": \"41a3d7fd-bf9a-4053-b20e-37453962b4d6\",\n            \"createdAt\": \"2023-03-21T10:10:54.000Z\",\n            \"name\": \"NewPet.json\",\n            \"updatedBy\": \"557089\",\n            \"updatedAt\": \"2023-03-21T10:10:54.000Z\"\n        },\n        {\n            \"path\": \"Pet.json\",\n            \"createdBy\": \"557089\",\n            \"id\": \"93502b81-9f47-45e1-94f7-64882c92519b\",\n            \"createdAt\": \"2023-03-21T10:10:54.000Z\",\n            \"name\": \"Pet.json\",\n            \"updatedBy\": \"557089\",\n            \"updatedAt\": \"2023-03-21T10:10:54.000Z\"\n        },\n        {\n            \"path\": \"common/Error.json\",\n            \"createdBy\": \"557089\",\n            \"id\": \"72f4e1c2-5bf8-4247-ab3c-42bcdcc9ae9c\",\n            \"createdAt\": \"2023-03-21T10:10:54.000Z\",\n            \"name\": \"Error.json\",\n            \"updatedBy\": \"557089\",\n            \"updatedAt\": \"2023-03-21T10:10:54.000Z\"\n        },\n        {\n            \"path\": \"parameters.json\",\n            \"createdBy\": \"557089\",\n            \"id\": \"2fdc8ea1-d02e-4e50-989e-6fa28f42b995\",\n            \"createdAt\": \"2023-03-21T10:10:54.000Z\",\n            \"name\": \"parameters.json\",\n            \"updatedBy\": \"557089\",\n            \"updatedAt\": \"2023-03-21T10:10:54.000Z\"\n        },\n        {\n            \"root\": {\n                \"enabled\": true\n            },\n            \"path\": \"swagger.json\",\n            \"createdBy\": \"557089\",\n            \"id\": \"b4fc1bdc-6587-4f9b-95c9-f768146089b4\",\n            \"createdAt\": \"2023-03-21T10:10:54.000Z\",\n            \"name\": \"swagger.json\",\n            \"updatedBy\": \"557089\",\n            \"updatedAt\": \"2023-03-21T10:10:54.000Z\"\n        }\n    ],\n    \"createdBy\": \"557089\",\n    \"createdAt\": \"2023-03-21T10:10:54.000Z\",\n    \"id\": \"b4fc1bdc-6587-4f9b-95c9-f768146089b4\",\n    \"updatedBy\": \"557089\",\n    \"updatedAt\": \"2023-03-21T10:10:54.000Z\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"openapi:3\",\n    \"files\": [\n        {\n            \"path\": \"swagger.json\",\n            \"content\": \"{\\n  \\\"openapi\\\": \\\"3.0.0\\\",\\n  \\\"info\\\": {\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"title\\\": \\\"Sample API\\\",\\n    \\\"description\\\": \\\"Buy or rent spacecrafts\\\"\\n  },\\n  \\\"paths\\\": {\\n    \\\"/spacecrafts/{spacecraftId}\\\": {\\n      \\\"parameters\\\": [\\n        {\\n          \\\"name\\\": \\\"spacecraftId\\\",\\n          \\\"description\\\": \\\"The unique identifier of the spacecraft\\\",\\n          \\\"in\\\": \\\"path\\\",\\n          \\\"required\\\": true,\\n          \\\"schema\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/SpacecraftId\\\"\\n          }\\n        }\\n      ],\\n      \\\"get\\\": {\\n        \\\"summary\\\": \\\"Read a spacecraft\\\",\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"The spacecraft corresponding to the provided `spacecraftId`\\\",\\n            \\\"content\\\": {\\n              \\\"application/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/Spacecraft\\\"\\n                }\\n              }\\n            }\\n          },\\n          \\\"404\\\": {\\n            \\\"description\\\": \\\"No spacecraft found for the provided `spacecraftId`\\\",\\n            \\\"content\\\": {\\n              \\\"application/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/Error\\\"\\n                }\\n              }\\n            }\\n          },\\n          \\\"500\\\": {\\n            \\\"description\\\": \\\"Unexpected error\\\",\\n            \\\"content\\\": {\\n              \\\"application/json\\\": {\\n                \\\"schema\\\": {\\n                  \\\"$ref\\\": \\\"#/components/schemas/Error\\\"\\n                }\\n              }\\n            }\\n          }\\n        }\\n      }\\n    }\\n  },\\n  \\\"components\\\": {\\n    \\\"schemas\\\": {\\n      \\\"SpacecraftId\\\": {\\n        \\\"description\\\": \\\"The unique identifier of a spacecraft\\\",\\n        \\\"type\\\": \\\"string\\\"\\n      },\\n      \\\"Spacecraft\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"id\\\",\\n          \\\"name\\\",\\n          \\\"type\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"id\\\": {\\n            \\\"$ref\\\": \\\"#/components/schemas/SpacecraftId\\\"\\n          },\\n          \\\"name\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          },\\n          \\\"type\\\": {\\n            \\\"type\\\": \\\"string\\\",\\n            \\\"enum\\\": [\\n              \\\"capsule\\\",\\n              \\\"probe\\\",\\n              \\\"satellite\\\",\\n              \\\"spaceplane\\\",\\n              \\\"station\\\"\\n            ]\\n          },\\n          \\\"description\\\": {\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      },\\n      \\\"Error\\\": {\\n        \\\"type\\\": \\\"object\\\",\\n        \\\"required\\\": [\\n          \\\"message\\\"\\n        ],\\n        \\\"properties\\\": {\\n          \\\"message\\\": {\\n            \\\"description\\\": \\\"A human readable error message\\\",\\n            \\\"type\\\": \\\"string\\\"\\n          }\\n        }\\n      }\\n    },\\n    \\\"securitySchemes\\\": {\\n      \\\"ApiKey\\\": {\\n        \\\"type\\\": \\\"apiKey\\\",\\n        \\\"in\\\": \\\"header\\\",\\n        \\\"name\\\": \\\"X-Api-Key\\\"\\n      }\\n    }\\n  },\\n  \\\"security\\\": [\\n    {\\n      \\\"ApiKey\\\": []\\n    }\\n  ]\\n}\"\n        },\n        {\n            \"path\": \"Pet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        },\n        {\n            \"path\": \"NewPet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"allOf\\\": [\\n    {\\n      \\\"$ref\\\": \\\"Pet.json\\\"\\n    },\\n    {\\n      \\\"required\\\": [\\n        \\\"name\\\"\\n      ],\\n      \\\"properties\\\": {\\n        \\\"description\\\": {\\n          \\\"type\\\": \\\"integer\\\",\\n          \\\"format\\\": \\\"int64\\\"\\n        }\\n      }\\n    }\\n  ]\\n}\"\n        },\n        {\n            \"path\": \"parameters.json\",\n            \"content\": \"{\\n  \\\"tagsParam\\\": {\\n    \\\"name\\\": \\\"tags\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"tags to filter by\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"collectionFormat\\\": \\\"csv\\\",\\n    \\\"items\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  },\\n  \\\"limitsParam\\\": {\\n    \\\"name\\\": \\\"limit\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"maximum number of results to return\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"integer\\\",\\n    \\\"format\\\": \\\"int32\\\"\\n  }\\n}\"\n        },\n        {\n            \"path\": \"common/Error.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"code\\\",\\n    \\\"message\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"code\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int32\\\"\\n    },\\n    \\\"message\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have access to perform this operation.\",\n    \"title\": \"You are not permitted to perform the action.\",\n    \"type\": \"forbiddenError\"\n}"
						},
						{
							"name": "Create Schema with Proto",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"proto:2\",\n    \"files\": [\n        {\n            \"path\": \"index.proto\",\n            \"content\": \"<file contents>\",\n            \"root\": {\n                \"enabled\": true\n            }\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas"
									]
								}
							},
							"status": "Created",
							"code": 201,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"proto:2\",\n    \"files\": [\n        {\n            \"path\": \"index.proto\",\n            \"createdBy\": \"557089\",\n            \"id\": \"41a3d7fd-bf9a-4053-b20e-37453962b4d6\",\n            \"createdAt\": \"2023-03-21T10:10:54.000Z\",\n            \"name\": \"index.proto\",\n            \"updatedBy\": \"557089\",\n            \"updatedAt\": \"2023-03-21T10:10:54.000Z\",\n            \"root\": {\n                \"enabled\": true\n            }\n        }\n    ],\n    \"createdBy\": \"557089\",\n    \"createdAt\": \"2023-03-21T10:10:54.000Z\",\n    \"id\": \"b4fc1bdc-6587-4f9b-95c9-f768146089b4\",\n    \"updatedBy\": \"557089\",\n    \"updatedAt\": \"2023-03-21T10:10:54.000Z\"\n}"
						},
						{
							"name": "API Not Found",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\" : \"openapi:3\",\n    \"files\": [\n        {\n            \"path\": \"swagger.json\",\n            \"content\": \"{\\n  \\\"swagger\\\": \\\"2.0\\\",\\n  \\\"info\\\": {\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"title\\\": \\\"Swagger Petstore\\\",\\n    \\\"description\\\": \\\"A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification\\\",\\n    \\\"termsOfService\\\": \\\"http://swagger.io/terms/\\\",\\n    \\\"contact\\\": {\\n      \\\"name\\\": \\\"Swagger API Team\\\",\\n      \\\"email\\\": \\\"apiteam@swagger.io\\\",\\n      \\\"url\\\": \\\"http://swagger.io\\\"\\n    },\\n    \\\"license\\\": {\\n      \\\"name\\\": \\\"Apache 2.0\\\",\\n      \\\"url\\\": \\\"https://www.apache.org/licenses/LICENSE-2.0.html\\\"\\n    }\\n  },\\n  \\\"host\\\": \\\"petstore.swagger.io\\\",\\n  \\\"basePath\\\": \\\"/api\\\",\\n  \\\"schemes\\\": [\\n    \\\"http\\\"\\n  ],\\n  \\\"consumes\\\": [\\n    \\\"application/json\\\"\\n  ],\\n  \\\"produces\\\": [\\n    \\\"application/json\\\"\\n  ],\\n  \\\"paths\\\": {\\n    \\\"/pets\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"Returns all pets from the system that the user has access to\\\\nNam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.\\\\n\\\\nSed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.\\\\n\\\",\\n        \\\"operationId\\\": \\\"findPets\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"$ref\\\": \\\"parameters.json#/tagsParam\\\"\\n          },\\n          {\\n            \\\"$ref\\\": \\\"parameters.json#/limitsParam\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"array\\\",\\n              \\\"items\\\": {\\n                \\\"$ref\\\": \\\"Pet.json\\\"\\n              }\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      },\\n      \\\"post\\\": {\\n        \\\"description\\\": \\\"Creates a new pet in the store.  Duplicates are allowed\\\",\\n        \\\"operationId\\\": \\\"addPet\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"pet\\\",\\n            \\\"in\\\": \\\"body\\\",\\n            \\\"description\\\": \\\"Pet to add to the store\\\",\\n            \\\"required\\\": true,\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"NewPet.json\\\"\\n            }\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"Pet.json\\\"\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      }\\n    },\\n    \\\"/pets/{id}\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"Returns a user based on a single ID, if the user does not have access to the pet\\\",\\n        \\\"operationId\\\": \\\"find pet by id\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"description\\\": \\\"ID of pet to fetch\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"Pet.json\\\"\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      },\\n      \\\"delete\\\": {\\n        \\\"description\\\": \\\"deletes a single pet based on the ID supplied\\\",\\n        \\\"operationId\\\": \\\"deletePet\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"description\\\": \\\"ID of pet to delete\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"204\\\": {\\n            \\\"description\\\": \\\"pet deleted\\\"\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\"\n        },\n        {\n            \"path\": \"Pet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        },\n        {\n            \"path\": \"NewPet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"allOf\\\": [\\n    {\\n      \\\"$ref\\\": \\\"Pet.json\\\"\\n    },\\n    {\\n      \\\"required\\\": [\\n        \\\"name\\\"\\n      ],\\n      \\\"properties\\\": {\\n        \\\"description\\\": {\\n          \\\"type\\\": \\\"integer\\\",\\n          \\\"format\\\": \\\"int64\\\"\\n        }\\n      }\\n    }\\n  ]\\n}\"\n        },\n        {\n            \"path\": \"parameters.json\",\n            \"content\": \"{\\n  \\\"tagsParam\\\": {\\n    \\\"name\\\": \\\"tags\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"tags to filter by\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"collectionFormat\\\": \\\"csv\\\",\\n    \\\"items\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  },\\n  \\\"limitsParam\\\": {\\n    \\\"name\\\": \\\"limit\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"maximum number of results to return\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"integer\\\",\\n    \\\"format\\\": \\\"int32\\\"\\n  }\\n}\"\n        },\n        {\n            \"path\": \"common/Error.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"code\\\",\\n    \\\"message\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"code\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int32\\\"\\n    },\\n    \\\"message\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"instanceNotFoundError\",\n    \"title\": \"Resource not found\",\n    \"detail\": \"We could not find the API you are looking for\"\n}"
						},
						{
							"name": "Schema Already Exists",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\" : \"openapi:3\",\n    \"files\": [\n        {\n            \"path\": \"swagger.json\",\n            \"content\": \"{\\n  \\\"swagger\\\": \\\"2.0\\\",\\n  \\\"info\\\": {\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"title\\\": \\\"Swagger Petstore\\\",\\n    \\\"description\\\": \\\"A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification\\\",\\n    \\\"termsOfService\\\": \\\"http://swagger.io/terms/\\\",\\n    \\\"contact\\\": {\\n      \\\"name\\\": \\\"Swagger API Team\\\",\\n      \\\"email\\\": \\\"apiteam@swagger.io\\\",\\n      \\\"url\\\": \\\"http://swagger.io\\\"\\n    },\\n    \\\"license\\\": {\\n      \\\"name\\\": \\\"Apache 2.0\\\",\\n      \\\"url\\\": \\\"https://www.apache.org/licenses/LICENSE-2.0.html\\\"\\n    }\\n  },\\n  \\\"host\\\": \\\"petstore.swagger.io\\\",\\n  \\\"basePath\\\": \\\"/api\\\",\\n  \\\"schemes\\\": [\\n    \\\"http\\\"\\n  ],\\n  \\\"consumes\\\": [\\n    \\\"application/json\\\"\\n  ],\\n  \\\"produces\\\": [\\n    \\\"application/json\\\"\\n  ],\\n  \\\"paths\\\": {\\n    \\\"/pets\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"Returns all pets from the system that the user has access to\\\\nNam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.\\\\n\\\\nSed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.\\\\n\\\",\\n        \\\"operationId\\\": \\\"findPets\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"$ref\\\": \\\"parameters.json#/tagsParam\\\"\\n          },\\n          {\\n            \\\"$ref\\\": \\\"parameters.json#/limitsParam\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"array\\\",\\n              \\\"items\\\": {\\n                \\\"$ref\\\": \\\"Pet.json\\\"\\n              }\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      },\\n      \\\"post\\\": {\\n        \\\"description\\\": \\\"Creates a new pet in the store.  Duplicates are allowed\\\",\\n        \\\"operationId\\\": \\\"addPet\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"pet\\\",\\n            \\\"in\\\": \\\"body\\\",\\n            \\\"description\\\": \\\"Pet to add to the store\\\",\\n            \\\"required\\\": true,\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"NewPet.json\\\"\\n            }\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"Pet.json\\\"\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      }\\n    },\\n    \\\"/pets/{id}\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"Returns a user based on a single ID, if the user does not have access to the pet\\\",\\n        \\\"operationId\\\": \\\"find pet by id\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"description\\\": \\\"ID of pet to fetch\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"Pet.json\\\"\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      },\\n      \\\"delete\\\": {\\n        \\\"description\\\": \\\"deletes a single pet based on the ID supplied\\\",\\n        \\\"operationId\\\": \\\"deletePet\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"description\\\": \\\"ID of pet to delete\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"204\\\": {\\n            \\\"description\\\": \\\"pet deleted\\\"\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\"\n        },\n        {\n            \"path\": \"Pet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        },\n        {\n            \"path\": \"NewPet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"allOf\\\": [\\n    {\\n      \\\"$ref\\\": \\\"Pet.json\\\"\\n    },\\n    {\\n      \\\"required\\\": [\\n        \\\"name\\\"\\n      ],\\n      \\\"properties\\\": {\\n        \\\"description\\\": {\\n          \\\"type\\\": \\\"integer\\\",\\n          \\\"format\\\": \\\"int64\\\"\\n        }\\n      }\\n    }\\n  ]\\n}\"\n        },\n        {\n            \"path\": \"parameters.json\",\n            \"content\": \"{\\n  \\\"tagsParam\\\": {\\n    \\\"name\\\": \\\"tags\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"tags to filter by\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"collectionFormat\\\": \\\"csv\\\",\\n    \\\"items\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  },\\n  \\\"limitsParam\\\": {\\n    \\\"name\\\": \\\"limit\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"maximum number of results to return\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"integer\\\",\\n    \\\"format\\\": \\\"int32\\\"\\n  }\\n}\"\n        },\n        {\n            \"path\": \"common/Error.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"code\\\",\\n    \\\"message\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"code\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int32\\\"\\n    },\\n    \\\"message\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"invalidParamsError\",\n    \"title\": \"Could not create the resource\",\n    \"detail\": \"Schema already exists for this API\"\n}"
						},
						{
							"name": "Missing files Parameter",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\" : \"openapi:3\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"invalidParamError\",\n    \"title\": \"Invalid request body\",\n    \"detail\": \"Missing parameter: 'files'\"\n}"
						},
						{
							"name": "Missing content Parameter",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\": \"openapi:3\",\n    \"files\": [\n        {\n            \"path\": \"index.json\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"invalidParamError\",\n    \"title\": \"Invalid request body\",\n    \"detail\": \"Required field 'content' missing in the files array\"\n}"
						},
						{
							"name": "Invalid type Parameter",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\" : \"openapi3\",\n     \"files\": [\n        {\n            \"path\": \"swagger.json\",\n            \"content\": \"{\\n  \\\"swagger\\\": \\\"2.0\\\",\\n  \\\"info\\\": {\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"title\\\": \\\"Swagger Petstore\\\",\\n    \\\"description\\\": \\\"A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification\\\",\\n    \\\"termsOfService\\\": \\\"http://swagger.io/terms/\\\",\\n    \\\"contact\\\": {\\n      \\\"name\\\": \\\"Swagger API Team\\\",\\n      \\\"email\\\": \\\"apiteam@swagger.io\\\",\\n      \\\"url\\\": \\\"http://swagger.io\\\"\\n    },\\n    \\\"license\\\": {\\n      \\\"name\\\": \\\"Apache 2.0\\\",\\n      \\\"url\\\": \\\"https://www.apache.org/licenses/LICENSE-2.0.html\\\"\\n    }\\n  },\\n  \\\"host\\\": \\\"petstore.swagger.io\\\",\\n  \\\"basePath\\\": \\\"/api\\\",\\n  \\\"schemes\\\": [\\n    \\\"http\\\"\\n  ],\\n  \\\"consumes\\\": [\\n    \\\"application/json\\\"\\n  ],\\n  \\\"produces\\\": [\\n    \\\"application/json\\\"\\n  ],\\n  \\\"paths\\\": {\\n    \\\"/pets\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"Returns all pets from the system that the user has access to\\\\nNam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.\\\\n\\\\nSed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.\\\\n\\\",\\n        \\\"operationId\\\": \\\"findPets\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"$ref\\\": \\\"parameters.json#/tagsParam\\\"\\n          },\\n          {\\n            \\\"$ref\\\": \\\"parameters.json#/limitsParam\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"array\\\",\\n              \\\"items\\\": {\\n                \\\"$ref\\\": \\\"Pet.json\\\"\\n              }\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      },\\n      \\\"post\\\": {\\n        \\\"description\\\": \\\"Creates a new pet in the store.  Duplicates are allowed\\\",\\n        \\\"operationId\\\": \\\"addPet\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"pet\\\",\\n            \\\"in\\\": \\\"body\\\",\\n            \\\"description\\\": \\\"Pet to add to the store\\\",\\n            \\\"required\\\": true,\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"NewPet.json\\\"\\n            }\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"Pet.json\\\"\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      }\\n    },\\n    \\\"/pets/{id}\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"Returns a user based on a single ID, if the user does not have access to the pet\\\",\\n        \\\"operationId\\\": \\\"find pet by id\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"description\\\": \\\"ID of pet to fetch\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"Pet.json\\\"\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      },\\n      \\\"delete\\\": {\\n        \\\"description\\\": \\\"deletes a single pet based on the ID supplied\\\",\\n        \\\"operationId\\\": \\\"deletePet\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"description\\\": \\\"ID of pet to delete\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"204\\\": {\\n            \\\"description\\\": \\\"pet deleted\\\"\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\"\n        },\n        {\n            \"path\": \"Pet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        },\n        {\n            \"path\": \"NewPet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"allOf\\\": [\\n    {\\n      \\\"$ref\\\": \\\"Pet.json\\\"\\n    },\\n    {\\n      \\\"required\\\": [\\n        \\\"name\\\"\\n      ],\\n      \\\"properties\\\": {\\n        \\\"description\\\": {\\n          \\\"type\\\": \\\"integer\\\",\\n          \\\"format\\\": \\\"int64\\\"\\n        }\\n      }\\n    }\\n  ]\\n}\"\n        },\n        {\n            \"path\": \"parameters.json\",\n            \"content\": \"{\\n  \\\"tagsParam\\\": {\\n    \\\"name\\\": \\\"tags\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"tags to filter by\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"collectionFormat\\\": \\\"csv\\\",\\n    \\\"items\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  },\\n  \\\"limitsParam\\\": {\\n    \\\"name\\\": \\\"limit\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"maximum number of results to return\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"integer\\\",\\n    \\\"format\\\": \\\"int32\\\"\\n  }\\n}\"\n        },\n        {\n            \"path\": \"common/Error.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"code\\\",\\n    \\\"message\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"code\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int32\\\"\\n    },\\n    \\\"message\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"InvalidParamsError\",\n    \"title\": \"Required parameter is invalid\",\n    \"detail\": \"Required property `type` is invalid. Should be one of: proto:2, proto:3, graphql, openapi:3_1, openapi:3, openapi:2, openapi:1, raml:1, raml:0_8, wsdl:2, wsdl:1, asyncapi:2\"\n}"
						},
						{
							"name": "Git-Linked API Errror",
							"originalRequest": {
								"method": "POST",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"type\" : \"openapi:3\",\n    \"files\": [\n        {\n            \"path\": \"swagger.json\",\n            \"content\": \"{\\n  \\\"swagger\\\": \\\"2.0\\\",\\n  \\\"info\\\": {\\n    \\\"version\\\": \\\"1.0.0\\\",\\n    \\\"title\\\": \\\"Swagger Petstore\\\",\\n    \\\"description\\\": \\\"A sample API that uses a petstore as an example to demonstrate features in the swagger-2.0 specification\\\",\\n    \\\"termsOfService\\\": \\\"http://swagger.io/terms/\\\",\\n    \\\"contact\\\": {\\n      \\\"name\\\": \\\"Swagger API Team\\\",\\n      \\\"email\\\": \\\"apiteam@swagger.io\\\",\\n      \\\"url\\\": \\\"http://swagger.io\\\"\\n    },\\n    \\\"license\\\": {\\n      \\\"name\\\": \\\"Apache 2.0\\\",\\n      \\\"url\\\": \\\"https://www.apache.org/licenses/LICENSE-2.0.html\\\"\\n    }\\n  },\\n  \\\"host\\\": \\\"petstore.swagger.io\\\",\\n  \\\"basePath\\\": \\\"/api\\\",\\n  \\\"schemes\\\": [\\n    \\\"http\\\"\\n  ],\\n  \\\"consumes\\\": [\\n    \\\"application/json\\\"\\n  ],\\n  \\\"produces\\\": [\\n    \\\"application/json\\\"\\n  ],\\n  \\\"paths\\\": {\\n    \\\"/pets\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"Returns all pets from the system that the user has access to\\\\nNam sed condimentum est. Maecenas tempor sagittis sapien, nec rhoncus sem sagittis sit amet. Aenean at gravida augue, ac iaculis sem. Curabitur odio lorem, ornare eget elementum nec, cursus id lectus. Duis mi turpis, pulvinar ac eros ac, tincidunt varius justo. In hac habitasse platea dictumst. Integer at adipiscing ante, a sagittis ligula. Aenean pharetra tempor ante molestie imperdiet. Vivamus id aliquam diam. Cras quis velit non tortor eleifend sagittis. Praesent at enim pharetra urna volutpat venenatis eget eget mauris. In eleifend fermentum facilisis. Praesent enim enim, gravida ac sodales sed, placerat id erat. Suspendisse lacus dolor, consectetur non augue vel, vehicula interdum libero. Morbi euismod sagittis libero sed lacinia.\\\\n\\\\nSed tempus felis lobortis leo pulvinar rutrum. Nam mattis velit nisl, eu condimentum ligula luctus nec. Phasellus semper velit eget aliquet faucibus. In a mattis elit. Phasellus vel urna viverra, condimentum lorem id, rhoncus nibh. Ut pellentesque posuere elementum. Sed a varius odio. Morbi rhoncus ligula libero, vel eleifend nunc tristique vitae. Fusce et sem dui. Aenean nec scelerisque tortor. Fusce malesuada accumsan magna vel tempus. Quisque mollis felis eu dolor tristique, sit amet auctor felis gravida. Sed libero lorem, molestie sed nisl in, accumsan tempor nisi. Fusce sollicitudin massa ut lacinia mattis. Sed vel eleifend lorem. Pellentesque vitae felis pretium, pulvinar elit eu, euismod sapien.\\\\n\\\",\\n        \\\"operationId\\\": \\\"findPets\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"$ref\\\": \\\"parameters.json#/tagsParam\\\"\\n          },\\n          {\\n            \\\"$ref\\\": \\\"parameters.json#/limitsParam\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"type\\\": \\\"array\\\",\\n              \\\"items\\\": {\\n                \\\"$ref\\\": \\\"Pet.json\\\"\\n              }\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      },\\n      \\\"post\\\": {\\n        \\\"description\\\": \\\"Creates a new pet in the store.  Duplicates are allowed\\\",\\n        \\\"operationId\\\": \\\"addPet\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"pet\\\",\\n            \\\"in\\\": \\\"body\\\",\\n            \\\"description\\\": \\\"Pet to add to the store\\\",\\n            \\\"required\\\": true,\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"NewPet.json\\\"\\n            }\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"Pet.json\\\"\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      }\\n    },\\n    \\\"/pets/{id}\\\": {\\n      \\\"get\\\": {\\n        \\\"description\\\": \\\"Returns a user based on a single ID, if the user does not have access to the pet\\\",\\n        \\\"operationId\\\": \\\"find pet by id\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"description\\\": \\\"ID of pet to fetch\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"200\\\": {\\n            \\\"description\\\": \\\"pet response\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"Pet.json\\\"\\n            }\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      },\\n      \\\"delete\\\": {\\n        \\\"description\\\": \\\"deletes a single pet based on the ID supplied\\\",\\n        \\\"operationId\\\": \\\"deletePet\\\",\\n        \\\"parameters\\\": [\\n          {\\n            \\\"name\\\": \\\"id\\\",\\n            \\\"in\\\": \\\"path\\\",\\n            \\\"description\\\": \\\"ID of pet to delete\\\",\\n            \\\"required\\\": true,\\n            \\\"type\\\": \\\"integer\\\",\\n            \\\"format\\\": \\\"int64\\\"\\n          }\\n        ],\\n        \\\"responses\\\": {\\n          \\\"204\\\": {\\n            \\\"description\\\": \\\"pet deleted\\\"\\n          },\\n          \\\"default\\\": {\\n            \\\"description\\\": \\\"unexpected error\\\",\\n            \\\"schema\\\": {\\n              \\\"$ref\\\": \\\"../common/Error.json\\\"\\n            }\\n          }\\n        }\\n      }\\n    }\\n  }\\n}\"\n        },\n        {\n            \"path\": \"Pet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        },\n        {\n            \"path\": \"NewPet.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"allOf\\\": [\\n    {\\n      \\\"$ref\\\": \\\"Pet.json\\\"\\n    },\\n    {\\n      \\\"required\\\": [\\n        \\\"name\\\"\\n      ],\\n      \\\"properties\\\": {\\n        \\\"description\\\": {\\n          \\\"type\\\": \\\"integer\\\",\\n          \\\"format\\\": \\\"int64\\\"\\n        }\\n      }\\n    }\\n  ]\\n}\"\n        },\n        {\n            \"path\": \"parameters.json\",\n            \"content\": \"{\\n  \\\"tagsParam\\\": {\\n    \\\"name\\\": \\\"tags\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"tags to filter by\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"array\\\",\\n    \\\"collectionFormat\\\": \\\"csv\\\",\\n    \\\"items\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  },\\n  \\\"limitsParam\\\": {\\n    \\\"name\\\": \\\"limit\\\",\\n    \\\"in\\\": \\\"query\\\",\\n    \\\"description\\\": \\\"maximum number of results to return\\\",\\n    \\\"required\\\": false,\\n    \\\"type\\\": \\\"integer\\\",\\n    \\\"format\\\": \\\"int32\\\"\\n  }\\n}\"\n        },\n        {\n            \"path\": \"common/Error.json\",\n            \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"code\\\",\\n    \\\"message\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"code\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int32\\\"\\n    },\\n    \\\"message\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n        }\n    ]\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"This action is not allowed for git linked APIs\",\n    \"type\": \"actionNotAllowedError\",\n    \"title\": \"Action not allowed\"\n}"
						}
					]
				},
				{
					"name": "Add 3.0 Schema",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 201\", function () {",
									"    pm.response.to.have.status(201);",
									"});",
									"const apiIds = JSON.parse(pm.environment.get('rt_APIIDs'));",
									"if(apiIds.length > 0) {",
									"    postman.setNextRequest(\"Get API\");",
									"}",
									"else {",
									"    postman.setNextRequest(null);",
									"}",
									""
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Content-Type",
								"value": "application/json"
							},
							{
								"key": "Accept",
								"value": "application/vnd.api.v10+json"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"content\": \"{{rt_targetSchema-string}}\"\n}"
						},
						"url": {
							"raw": "https://api.getpostman.com/apis/{{sourceAPIID}}/schemas/{{rt_schemaId}}/files/{{rt_outputFilePath}}",
							"protocol": "https",
							"host": [
								"api",
								"getpostman",
								"com"
							],
							"path": [
								"apis",
								"{{sourceAPIID}}",
								"schemas",
								"{{rt_schemaId}}",
								"files",
								"{{rt_outputFilePath}}"
							]
						},
						"description": "Creates or updates an API schema file. Runs only when the `cfg_createNewAPI` variable is set to `false`\n\nThe request body must contain the following properties:\n\n- `content` — A **string** value that contains the file's contents. Set dynamically at runtime by the `rt_targetSchema-string` variable.\n    \n\n**Note:**\n\n- If the provided file path exists, the file will be updated with the new contents.\n- If the provided file path does **not** exist, then a new schema file will be created.\n- If the file path contains a `/` (forward slash) character, then a folder is created. For example, if the file path is the `dir/schema.json` value, then a `dir` folder is created with the `schema.json` file inside."
					},
					"response": [
						{
							"name": "Successful Response",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								},
								"description": "Creates an API definition. The request body must contain a `schema` object with the following properties:\n\n*   `type` — A **string** value that contains the API definition's type. One of:  \n    * `openapi3_1`  \n    * `openapi3`  \n    * `openapi2`  \n    * `openapi1`  \n    * `raml`  \n    * `raml1`  \n    * `wsdl1`  \n    * `wsdl2`  \n    * `graphql`  \n    * `proto2`  \n    * `graphql`  \n    * `proto3`  \n* `language` — A **string** value that contains the API definition's language. One of:  \n    * OpenAPI and RAML — `json` or `yaml`  \n    * GraphQL — `graphql`  \n    * WSDL — `xml`  \n    * Protobuf — `proto`  \n* `schema` — A **string** value that contains the API definition's contents."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"ae2b9ab2-28f2-401d-912f-eca09a78e98b\",\n    \"createdBy\": \"2345\",\n    \"updatedBy\": \"2345\",\n    \"createdAt\": \"2022-03-29T11:37:15Z\",\n    \"updatedAt\": \"2022-03-29T11:37:15Z\",\n    \"path\": \"data-model/index.json\",\n    \"name\": \"index.json\"\n}"
						},
						{
							"name": "Successfully Update root Tag",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"root\": {\n        \"enabled\": true\n    }\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								},
								"description": "Creates an API definition. The request body must contain a `schema` object with the following properties:\n\n*   `type` — A **string** value that contains the API definition's type. One of:  \n    * `openapi3_1`  \n    * `openapi3`  \n    * `openapi2`  \n    * `openapi1`  \n    * `raml`  \n    * `raml1`  \n    * `wsdl1`  \n    * `wsdl2`  \n    * `graphql`  \n    * `proto2`  \n    * `graphql`  \n    * `proto3`  \n* `language` — A **string** value that contains the API definition's language. One of:  \n    * OpenAPI and RAML — `json` or `yaml`  \n    * GraphQL — `graphql`  \n    * WSDL — `xml`  \n    * Protobuf — `proto`  \n* `schema` — A **string** value that contains the API definition's contents."
							},
							"status": "OK",
							"code": 200,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"id\": \"ae2b9ab2-28f2-401d-912f-eca09a78e98b\",\n    \"createdBy\": \"2345\",\n    \"updatedBy\": \"2345\",\n    \"createdAt\": \"2022-03-29T11:37:15Z\",\n    \"updatedAt\": \"2022-03-29T11:37:15Z\",\n    \"path\": \"data-model/index.json\",\n    \"name\": \"index.json\"\n}"
						},
						{
							"name": "API Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"instanceNotFoundError\",\n    \"title\": \"Resource not found\",\n    \"detail\": \"We could not find the API you are looking for\"\n}"
						},
						{
							"name": "Schema Not Found",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "Not Found",
							"code": 404,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"instanceNotFoundError\",\n    \"title\": \"Resource not found\",\n    \"detail\": \"We could not find the resource you are looking for\"\n}"
						},
						{
							"name": "Schema Not Linked to API",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "Bad Request",
							"code": 400,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"invalidParamError\",\n    \"title\": \"Invalid param error\",\n    \"detail\": \"Schema is not linked to the API\"\n}"
						},
						{
							"name": "Git-Linked API Errror",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Content-Type",
										"value": "application/json"
									},
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "Unprocessable Entity (WebDAV) (RFC 4918)",
							"code": 422,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"description": ""
								}
							],
							"cookie": [],
							"body": "{\n    \"type\": \"actionNotAllowedError\",\n    \"title\": \"Action not allowed\",\n    \"detail\": \"This action is not allowed for Git linked APIs\"\n}"
						},
						{
							"name": "Forbidden",
							"originalRequest": {
								"method": "PUT",
								"header": [
									{
										"key": "Accept",
										"value": "application/vnd.api.v10+json"
									},
									{
										"key": "Content-Type",
										"value": "application/json"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"content\": \"{\\n  \\\"type\\\": \\\"object\\\",\\n  \\\"required\\\": [\\n    \\\"id\\\",\\n    \\\"name\\\"\\n  ],\\n  \\\"properties\\\": {\\n    \\\"id\\\": {\\n      \\\"type\\\": \\\"integer\\\",\\n      \\\"format\\\": \\\"int64\\\"\\n    },\\n    \\\"name\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    },\\n    \\\"tag\\\": {\\n      \\\"type\\\": \\\"string\\\"\\n    }\\n  }\\n}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "https://api.getpostman.com/apis/{{apiId}}/schemas/{{schemaId}}/files/{{filePath}}",
									"protocol": "https",
									"host": [
										"api",
										"getpostman",
										"com"
									],
									"path": [
										"apis",
										"{{apiId}}",
										"schemas",
										"{{schemaId}}",
										"files",
										"{{filePath}}"
									]
								}
							},
							"status": "Forbidden",
							"code": 403,
							"_postman_previewlanguage": "json",
							"header": [
								{
									"key": "Content-Type",
									"value": "application/json",
									"name": "Content-Type",
									"description": "",
									"type": "text"
								}
							],
							"cookie": [],
							"body": "{\n    \"detail\": \"You do not have access to perform this operation.\",\n    \"title\": \"You are not permitted to perform the action.\",\n    \"type\": \"forbiddenError\"\n}"
						}
					]
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "{{cfg_pmanAPIKey}}",
				"type": "string"
			},
			{
				"key": "key",
				"value": "X-API-Key",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}